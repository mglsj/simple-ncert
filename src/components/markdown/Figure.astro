---
import { generateRandomId } from "@/lib/helpers";
import FigureCaption from "../partials/FigureCaption.astro";
import FigureImage, { type ImageEntry } from "../partials/FigureImage.astro";

interface Props {
	id?: string;
	title: string;
	invertible?: boolean;
	reverseInvert?: boolean;
	halfWidth?: boolean;
	center?: boolean;
	images?: ImageSrcEntry[];
}

type ImageSrcEntry = {
	src: Promise<{ default: ImageMetadata }>;
	srcDark?: Promise<{ default: ImageMetadata }>;
	alt: string;
};

const {
	id = generateRandomId(),
	title,
	invertible = false,
	reverseInvert = false,
	halfWidth = false,
	center = false,
	images: sources = [],
} = Astro.props;

const images: ImageEntry[] = await Promise.all(
	sources.map(async (source) => ({
		image: (await source.src).default,
		imageDark: (source.srcDark && (await source.srcDark).default) || null,
		alt: source.alt,
	})),
);
---

<figure
	id={`figure-${id}`}
	class:list={[
		invertible && !reverseInvert && "img-invertible",
		invertible && reverseInvert && "img-reverse-invertible",
		halfWidth ? "img-half-width" : "img-full-width",
	]}
>
	{(center || halfWidth) && <Fragment set:html={`<center>`} />}

	{images?.map((entry) => <FigureImage entry={entry} />)}

	<slot />

	{(center || halfWidth) && <Fragment set:html={`</center>`} />}

	{
		title && (
			<figcaption>
				<FigureCaption caption={title} />
			</figcaption>
		)
	}
</figure>
