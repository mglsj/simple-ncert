---
import Box from "@/components/partials/Box.astro";
import RunAll from "@/components/partials/RunAll.astro";
import Loader from "../partials/Loader.astro";

interface Props {
	ds: boolean;
}

const { ds = false } = Astro.props;
---

<Box title="Interactive Python" variant="minimal" icon="seti:python">
	<div id="pyodide-modules" data-module-ds={ds}></div>
	<p>
		This page uses Pyodide. That means all the Python code you see here is
		executed in your browser using WebAssembly. You can run the code
		snippets by clicking the "Run Code" button. If you want to run all the
		code snippets at once, click the "Run All" button.
	</p>
	<RunAll />
</Box>

<Loader title="Loading Python Console" id="pyodide-loading" />

<style is:global>
	.expressive-code .run {
		inset-inline-end: calc(
			var(--ec-brdWd) + var(--ec-uiPadInl) / 2 + 40px
		) !important;
	}

	.expressive-code .run button::after {
		mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' height='20px' viewBox='0 -960 960 960' width='20px' fill='%23000000'%3E%3Cpath d='M336-216v-528l408 264-408 264Zm73-265Zm-1 133 204-132-204-132v264Z'/%3E%3C/svg%3E") !important;
	}
</style>

<script>
	import await_future_py from "./await_future.py?raw";
	import plt_show_py from "./plt_show.py?raw";

	import { version as PYODIDE_VERSION } from "pyodide/package.json";
	import { loadPyodide, type PyodideInterface } from "pyodide";
	import type {
		PyProxy,
		PyDict,
		PyAwaitable,
		PyProxyWithGet,
		PyCallable,
	} from "pyodide/ffi";

	import {
		PYODIDE_PACKAGES,
		PYODIDE_DS_PACKAGES,
		PYTHON_TAG_NAME,
	} from "./helpers.ts";
	const dataNode = document.getElementById("pyodide-modules");
	const ds = dataNode?.dataset.moduleDs === "true";

	const pyodidePackages = [
		...PYODIDE_PACKAGES,
		...(ds ? PYODIDE_DS_PACKAGES : []),
	];

	type PyConsole = {
		stdout_callback: (s: string) => void;
		stderr_callback: (s: string) => void;
		push: (line: string) => PyProxyWithGet;
		// custom
		await_future: PyAwaitable & PyCallable;
	};

	declare global {
		interface Window {
			pyodide: PyodideInterface;
			pyConsole: PyConsole;
		}
	}

	function resetPyodideStdStreams(pyodide: PyodideInterface) {
		pyodide.setStdin({ stdin: () => prompt() || "" });

		pyodide.setStdout({
			batched: (s: string) => console.log("Pyodide: " + s),
		});

		pyodide.setStderr({
			batched: (s: string) => console.error("Pyodide: " + s),
		});
	}

	async function initializePyodide(): Promise<PyodideInterface> {
		const pyodide = await loadPyodide({
			indexURL: `https://cdn.jsdelivr.net/pyodide/v${PYODIDE_VERSION}/full/`,
			packages: pyodidePackages,
		});
		resetPyodideStdStreams(pyodide);

		// patch http module
		pyodide.runPython(`
import pyodide_http
pyodide_http.patch_all()`);

		if (ds) {
			// patch matplotlib show
			pyodide.runPython(plt_show_py);
		}

		return pyodide;
	}

	function resetPyConsoleCallbacks(pyConsole: PyConsole) {
		pyConsole.stdout_callback = (s: string) => {
			console.log("Pyodide: " + s.trimEnd());
		};
		pyConsole.stderr_callback = (s: string) => {
			console.error("Pyodide: " + s.trimEnd());
		};
	}

	async function initializePyConsole(
		pyodide: PyodideInterface,
	): Promise<PyConsole> {
		const { PyodideConsole } = pyodide.pyimport("pyodide.console") as {
			PyodideConsole: (arg0: PyProxy) => PyConsole;
		};

		const pyConsole = PyodideConsole(pyodide.globals);
		resetPyConsoleCallbacks(pyConsole);

		const namespace: PyDict = pyodide.globals.get("dict")();
		pyConsole.await_future = pyodide.runPython(await_future_py, {
			globals: namespace,
		}) as PyAwaitable & PyCallable;
		namespace.destroy();

		return pyConsole;
	}

	async function executeCode(
		pyodide: PyodideInterface,
		code: string,
	): Promise<string> {
		let output = "";
		let last_output = "";

		const decoder = new TextDecoder();

		pyodide.setStdin({
			stdin: () => {
				const input = prompt(last_output);
				output += input + "\n";
				return input;
			},
		});
		pyodide.setStdout({
			write: (data: Uint8Array) => {
				const std_out = decoder.decode(data);
				last_output = std_out;
				output += std_out;
				return std_out.length;
			},
		});
		pyodide.setStderr({
			write: (data: Uint8Array) => {
				const std_err = decoder.decode(data);
				output += std_err;
				return std_err.length;
			},
		});

		try {
			pyodide.runPython(code);

			// flush stdout
			pyodide.runPython(`print(end="",flush=True)`);
		} catch (e) {
			if (e?.constructor.name === "PythonError") {
				output += e.message;
			} else {
				throw e;
			}
		}

		resetPyodideStdStreams(pyodide);

		return output;
	}

	async function executeLine(
		pyConsole: PyConsole,
		pyodide: PyodideInterface,
		line: string,
	): Promise<{
		std_out: string;
		std_err: string;
	}> {
		let std_out = "";
		let std_err = "";
		let last_output = "";

		pyConsole.stdout_callback = (s: string) => {
			std_out += s;
			last_output = s.trimEnd();
		};
		pyConsole.stderr_callback = (s: string) => {
			std_err += s;
		};
		pyodide.setStdin({
			stdin: () => {
				const input = prompt(last_output);
				std_out += input + "\n";
				return input;
			},
		});

		execute: {
			const consoleFuture = pyConsole.push(line);

			switch (consoleFuture.syntax_check) {
				case "syntax-error":
					std_err += `Syntax Error in line: ${line}\n${consoleFuture.error || ""}`;
					break execute;
				case "incomplete":
					break execute;
				case "complete":
					break;
				default:
					throw new Error(
						`Unexpected PyConsole.future type ${consoleFuture.syntax_check || ""}`,
					);
			}

			const wrapped = pyConsole.await_future(consoleFuture);
			try {
				const [value] = await wrapped;

				if (value !== undefined) {
					std_out += value.toString() + "\n";
				}
				if (value instanceof window.pyodide.ffi.PyProxy) {
					value.destroy();
				}
			} catch (e) {
				if (e?.constructor.name === "PythonError") {
					const message = consoleFuture.formatted_error || e.message;
					std_err += message;
				} else {
					throw e;
				}
			} finally {
				consoleFuture.destroy();
				wrapped.destroy();
			}
		}
		resetPyConsoleCallbacks(pyConsole);
		resetPyodideStdStreams(pyodide);
		return { std_out, std_err };
	}

	async function runSnippet(
		container: HTMLElement,
		pyConsole: PyConsole,
		pyodide: PyodideInterface,
		focusOutput: boolean = false,
	) {
		const snippet = container.querySelector("snippet");

		const outputContainer = container.querySelector("output");
		outputContainer.innerHTML = "";

		const outputElement = document.createElement("pre");
		outputElement.innerHTML = "<span>Running...<span/>";
		outputContainer?.appendChild(outputElement);

		let anyOutput = false;

		if (ds) {
			// set matplotlib target
			document.pyodideMplTarget = outputElement;
			pyodide.runPython(
				"import matplotlib.pyplot; matplotlib.pyplot.figure()",
			);
		}

		if (container.dataset.mode === "code") {
			const output = await executeCode(
				pyodide,
				snippet.textContent.trim() + "\n\n",
			);

			if (output) {
				if (!anyOutput) {
					outputElement.innerHTML = "";
					anyOutput = true;
				}
				outputElement.innerHTML += output.replaceAll("\n", "<br/>");
			}
		} else {
			const lines: string[] = [
				...snippet.textContent.trim().split("\n"),
				"\n",
			];

			for (const line of lines) {
				const { std_out, std_err } = await executeLine(
					pyConsole,
					pyodide,
					line,
				);
				if (std_out) {
					if (!anyOutput) {
						outputElement.innerHTML = "";
						anyOutput = true;
					}
					outputElement.innerHTML += std_out.replaceAll(
						"\n",
						"<br/>",
					);
				}
				if (std_err) {
					if (!anyOutput) {
						outputElement.textContent = "";
						anyOutput = true;
					}
					outputElement.textContent += std_err;
				}
			}
		}

		if (!anyOutput) {
			outputElement.innerHTML = "<span>[Executed without output]<span/>";
		}

		if (ds) {
			// reset matplotlib target
			document.pyodideMplTarget = null;
		}

		if (focusOutput) {
			outputElement.scrollIntoView({ behavior: "smooth" });
		}
	}

	const execPyContainers = document.querySelectorAll(
		PYTHON_TAG_NAME,
	) as NodeListOf<HTMLElement>;

	async function runAllSnippets(
		pyConsole: PyConsole,
		pyodide: PyodideInterface,
		follow: boolean = false,
	) {
		for (const container of execPyContainers) {
			const outputContainer = container.querySelector("output");
			outputContainer.innerHTML = "<pre>Waiting...</pre>";
		}

		for (const container of execPyContainers) {
			await runSnippet(container, pyConsole, pyodide, follow);
		}
	}

	// Add run button to each code snippet
	for (const container of execPyContainers) {
		const figureConatiner = container.querySelector("figure");

		const runButton = document.createElement("button") as HTMLButtonElement;
		runButton.title = "Run Code";
		runButton.innerHTML = "<div></div>";
		runButton.onclick = () => {
			if (!window.pyConsole) {
				console.error("PyConsole not initialized");
				return;
			}
			runSnippet(container, window.pyConsole, window.pyodide);
		};
		runButton.dataset.copied = "Executed";

		const runButtonContainer = document.createElement("div");
		runButtonContainer.classList.add("copy", "run");
		runButtonContainer.appendChild(runButton);

		figureConatiner?.appendChild(runButtonContainer);
	}

	// Run All Button
	const runAllBtn = document.querySelector(".run-all");
	runAllBtn?.addEventListener("click", async () => {
		if (!window.pyConsole) {
			console.error("PyConsole not initialized");
			return;
		}
		await runAllSnippets(window.pyConsole, window.pyodide);
	});

	document.addEventListener("DOMContentLoaded", async () => {
		console.log("Initializing Pyodide and PyConsole");

		window.pyodide = await initializePyodide();
		console.log("Pyodide initialized");

		window.pyConsole = await initializePyConsole(window.pyodide);
		console.log("PyConsole initialized");

		document.getElementById("pyodide-loading")?.remove();
	});
</script>
